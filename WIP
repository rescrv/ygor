/* collect getrusage stats */
int ygor_data_logger_record_rusage_stats(struct ygor_data_logger* ydl, uint64_t when, struct rusage* usage);

/* collect system io stats (Linux only) */
struct ygor_io_stats
{
    uint64_t read_ios;
    uint64_t read_merges;
    uint64_t read_bytes;
    uint64_t read_ticks;
    uint64_t write_ios;
    uint64_t write_merges;
    uint64_t write_bytes;
    uint64_t write_ticks;
    uint64_t in_flight;
    uint64_t io_ticks;
    uint64_t time_in_queue;
};
int ygor_io_block_stat_path(const char* path, char* stat_path, size_t stat_path_sz);
int ygor_io_collect_stats(char* path, struct ygor_io_stats* stats);
int ygor_data_logger_record_io_stats(struct ygor_data_logger* ydl, uint64_t when, const struct ygor_io_stats* stats);

#define SERIES_RU_UTIME             0xffff0000U
#define SERIES_RU_STIME             0xffff0001U
#define SERIES_RU_MAXRSS            0xffff0002U
#define SERIES_RU_IXRSS             0xffff0003U
#define SERIES_RU_IDRSS             0xffff0004U
#define SERIES_RU_ISRSS             0xffff0005U
#define SERIES_RU_MINFLT            0xffff0006U
#define SERIES_RU_MAJFLT            0xffff0007U
#define SERIES_RU_NSWAP             0xffff0008U
#define SERIES_RU_INBLOCK           0xffff0009U
#define SERIES_RU_OUBLOCK           0xffff000aU
#define SERIES_RU_MSGSND            0xffff000bU
#define SERIES_RU_MSGRCV            0xffff000cU
#define SERIES_RU_NSIGNALS          0xffff000dU
#define SERIES_RU_NVCSW             0xffff000eU
#define SERIES_RU_NIVCSW            0xffff000fU

#define SERIES_IO_READ_IOS          0xffff0010U
#define SERIES_IO_READ_MERGES       0xffff0011U
#define SERIES_IO_READ_BYTES        0xffff0012U
#define SERIES_IO_READ_TICKS        0xffff0013U
#define SERIES_IO_WRITE_IOS         0xffff0014U
#define SERIES_IO_WRITE_MERGES      0xffff0015U
#define SERIES_IO_WRITE_BYTES       0xffff0016U
#define SERIES_IO_WRITE_TICKS       0xffff0017U
#define SERIES_IO_IN_FLIGHT         0xffff0018U
#define SERIES_IO_IO_TICKS          0xffff0019U
#define SERIES_IO_TIME_IN_QUEUE     0xffff001aU

struct ygor_summary
{
    uint64_t points;
    uint64_t nanos;
    double mean;
    double stdev;
    double variance;
};

struct ygor_difference
{
    double raw;
    double raw_plus_minus;
    double percent;
    double percent_plus_minus;
};

int ygor_summarize(const char* input, struct ygor_summary* summary);
int ygor_t_test(struct ygor_summary* baseline,
                struct ygor_summary* compared,
                double interval,
                struct ygor_difference* diff);
YGOR_API int
ygor_data_logger_record_rusage_stats(struct ygor_data_logger* ydl, uint64_t when, struct rusage* usage)
{
    ygor_data_record ydr;
    ydr.when    = when;
    ydr.series  = SERIES_RU_UTIME;
    ydr.data    = usage->ru_utime.tv_sec * 1000000ULL + usage->ru_utime.tv_usec;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_RU_STIME;
    ydr.data    = usage->ru_stime.tv_sec * 1000000ULL + usage->ru_stime.tv_usec;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_RU_MAXRSS;
    ydr.data    = usage->ru_maxrss;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_RU_IXRSS;
    ydr.data    = usage->ru_ixrss;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_RU_IDRSS;
    ydr.data    = usage->ru_idrss;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_RU_ISRSS;
    ydr.data    = usage->ru_isrss;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_RU_MINFLT;
    ydr.data    = usage->ru_minflt;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_RU_MAJFLT;
    ydr.data    = usage->ru_majflt;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_RU_NSWAP;
    ydr.data    = usage->ru_nswap;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_RU_INBLOCK;
    ydr.data    = usage->ru_inblock;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_RU_OUBLOCK;
    ydr.data    = usage->ru_oublock;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_RU_MSGSND;
    ydr.data    = usage->ru_msgsnd;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_RU_MSGRCV;
    ydr.data    = usage->ru_msgrcv;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_RU_NSIGNALS;
    ydr.data    = usage->ru_nsignals;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_RU_NVCSW;
    ydr.data    = usage->ru_nvcsw;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_RU_NIVCSW;
    ydr.data    = usage->ru_nivcsw;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    return 0;
}

YGOR_API int
ygor_io_block_stat_path(const char* _path, char* stat_path, size_t stat_path_sz)
{
    std::string path(_path);

    if (!po6::path::realpath(path, &path))
    {
        return -1;
    }

    std::vector<std::string> block_devs;
    DIR* dir = opendir("/sys/block");
    struct dirent* ent = NULL;

    if (dir == NULL)
    {
        return -1;
    }

    errno = 0;

    while ((ent = readdir(dir)) != NULL)
    {
        block_devs.push_back(ent->d_name);
    }

    closedir(dir);

    if (errno != 0)
    {
        return -1;
    }

    FILE* mounts = fopen("/proc/mounts", "r");

    if (!mounts)
    {
        return -1;
    }

    char* line = NULL;
    size_t line_sz = 0;
    size_t max_mnt_sz = 0;
    bool done = false;
    bool error = false;

    while (!done && !error)
    {
        ssize_t amt = getline(&line, &line_sz, mounts);

        if (amt < 0)
        {
            if (ferror(mounts) != 0)
            {
                error = true;
                break;
            }

            if (feof(mounts) != 0)
            {
                break;
            }

            error = true;
            break;
        }

        char dev[4096];
        char mnt[4096];
        int pts = sscanf(line, "%4095s %4095s", dev, mnt);

        if (pts != 2)
        {
            continue;
        }

        size_t msz = strlen(mnt);

        if (strncmp(mnt, path.c_str(), msz) != 0 ||
            msz < max_mnt_sz)
        {
            continue;
        }

        std::string dev_path;

        if (po6::path::realpath(dev, &dev_path))
        {
            dev_path = po6::path::basename(dev_path);
        }
        else
        {
            dev_path = po6::path::basename(dev);
        }

        for (size_t i = 0; i < block_devs.size(); ++i)
        {
            size_t dsz = std::min(dev_path.size(), block_devs[i].size());

            if (strncmp(block_devs[i].c_str(), dev_path.c_str(), dsz) == 0)
            {
                max_mnt_sz = msz;
                std::string block_dev_path = std::string("/sys/block/") + block_devs[i] + "/stat";

                if (block_dev_path.size() + 1 < stat_path_sz)
                {
                    memmove(stat_path, block_dev_path.c_str(), block_dev_path.size() + 1);
                    done = true;
                }
            }
        }
    }

    if (line)
    {
        free(line);
    }

    fclose(mounts);
    return done ? 0 : -1;
}

YGOR_API int
ygor_io_collect_stats(char* path, struct ygor_io_stats* stats)
{
    FILE* fin = fopen(path, "r");

    if (!fin)
    {
        return -1;
    }

    uint64_t read_sectors;
    uint64_t write_sectors;
    int x = fscanf(fin, "%lu %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu",
                   &stats->read_ios, &stats->read_merges, &read_sectors, &stats->read_ticks,
                   &stats->write_ios, &stats->write_merges, &write_sectors, &stats->write_ticks,
                   &stats->in_flight, &stats->io_ticks, &stats->time_in_queue);
    fclose(fin);

    if (x == 11)
    {
        stats->read_bytes = read_sectors * 512;
        stats->write_bytes = write_sectors * 512;
        return 0;
    }

    return -1;
}

YGOR_API int
ygor_data_logger_record_io_stats(struct ygor_data_logger* ydl,
                                 uint64_t when,
                                 const struct ygor_io_stats* stats)
{
    ygor_data_record ydr;
    ydr.when    = when;
    ydr.series  = SERIES_IO_READ_IOS;
    ydr.data    = stats->read_ios;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_IO_READ_MERGES;
    ydr.data    = stats->read_merges;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_IO_READ_BYTES;
    ydr.data    = stats->read_bytes;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_IO_READ_TICKS;
    ydr.data    = stats->read_ticks;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_IO_WRITE_IOS;
    ydr.data    = stats->write_ios;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_IO_WRITE_MERGES;
    ydr.data    = stats->write_merges;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_IO_WRITE_BYTES;
    ydr.data    = stats->write_bytes;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_IO_WRITE_TICKS;
    ydr.data    = stats->write_ticks;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_IO_IN_FLIGHT;
    ydr.data    = stats->in_flight;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_IO_IO_TICKS;
    ydr.data    = stats->io_ticks;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    ydr.series  = SERIES_IO_TIME_IN_QUEUE;
    ydr.data    = stats->time_in_queue;
    if (ygor_data_logger_record(ydl, &ydr) < 0) { return -1; }
    return 0;
}

YGOR_API int
ygor_summarize(const char* input, struct ygor_summary* summary)
{
    ygor_data_iterator* di = ygor_data_iterator_create(input);

    if (!di)
    {
        return -1;
    }

    uint64_t start = UINT64_MAX;
    uint64_t end = 0;
    double n = 0;
    double mean = 0;
    double M2 = 0;
    int status = 0;

    while ((status = ygor_data_iterator_valid(di)) > 0)
    {
        ygor_data_record dr;
        ygor_data_iterator_read(di, &dr);
        ygor_data_iterator_advance(di);

        start = std::min(start, dr.when);
        end = std::max(end, dr.when);
        end = std::max(end, dr.when + dr.data);
        ++n;
        double delta = dr.data - mean;
        mean = mean + delta / n;
        M2 = M2 + delta * (dr.data - mean);
    }

    ygor_data_iterator_destroy(di);

    if (status < 0)
    {
        return false;
    }

    double stdev = 0;
    double variance = 0;

    if (n > 1)
    {
        variance = M2 / (n - 1);
        stdev = sqrt(variance);
    }

    summary->points = n;
    summary->nanos = end - start;
    summary->mean = mean;
    summary->stdev = stdev;
    summary->variance = variance;
    return true;
}

/* Tables and intent of throughput_latency_t_test borrowed from phk.
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <phk@FreeBSD.ORG> wrote this file.  As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
 * ----------------------------------------------------------------------------
 *
 */
#define NSTUDENT 100
#define NCONF 6
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlarger-than="
static double const studentpct[] = { 80, 90, 95, 98, 99, 99.5 };
static double student [NSTUDENT + 1][NCONF] = {
/* inf */   {   1.282,  1.645,  1.960,  2.326,  2.576,  3.090  },
/* 1. */    {   3.078,  6.314,  12.706, 31.821, 63.657, 318.313  },
/* 2. */    {   1.886,  2.920,  4.303,  6.965,  9.925,  22.327  },
/* 3. */    {   1.638,  2.353,  3.182,  4.541,  5.841,  10.215  },
/* 4. */    {   1.533,  2.132,  2.776,  3.747,  4.604,  7.173  },
/* 5. */    {   1.476,  2.015,  2.571,  3.365,  4.032,  5.893  },
/* 6. */    {   1.440,  1.943,  2.447,  3.143,  3.707,  5.208  },
/* 7. */    {   1.415,  1.895,  2.365,  2.998,  3.499,  4.782  },
/* 8. */    {   1.397,  1.860,  2.306,  2.896,  3.355,  4.499  },
/* 9. */    {   1.383,  1.833,  2.262,  2.821,  3.250,  4.296  },
/* 10. */   {   1.372,  1.812,  2.228,  2.764,  3.169,  4.143  },
/* 11. */   {   1.363,  1.796,  2.201,  2.718,  3.106,  4.024  },
/* 12. */   {   1.356,  1.782,  2.179,  2.681,  3.055,  3.929  },
/* 13. */   {   1.350,  1.771,  2.160,  2.650,  3.012,  3.852  },
/* 14. */   {   1.345,  1.761,  2.145,  2.624,  2.977,  3.787  },
/* 15. */   {   1.341,  1.753,  2.131,  2.602,  2.947,  3.733  },
/* 16. */   {   1.337,  1.746,  2.120,  2.583,  2.921,  3.686  },
/* 17. */   {   1.333,  1.740,  2.110,  2.567,  2.898,  3.646  },
/* 18. */   {   1.330,  1.734,  2.101,  2.552,  2.878,  3.610  },
/* 19. */   {   1.328,  1.729,  2.093,  2.539,  2.861,  3.579  },
/* 20. */   {   1.325,  1.725,  2.086,  2.528,  2.845,  3.552  },
/* 21. */   {   1.323,  1.721,  2.080,  2.518,  2.831,  3.527  },
/* 22. */   {   1.321,  1.717,  2.074,  2.508,  2.819,  3.505  },
/* 23. */   {   1.319,  1.714,  2.069,  2.500,  2.807,  3.485  },
/* 24. */   {   1.318,  1.711,  2.064,  2.492,  2.797,  3.467  },
/* 25. */   {   1.316,  1.708,  2.060,  2.485,  2.787,  3.450  },
/* 26. */   {   1.315,  1.706,  2.056,  2.479,  2.779,  3.435  },
/* 27. */   {   1.314,  1.703,  2.052,  2.473,  2.771,  3.421  },
/* 28. */   {   1.313,  1.701,  2.048,  2.467,  2.763,  3.408  },
/* 29. */   {   1.311,  1.699,  2.045,  2.462,  2.756,  3.396  },
/* 30. */   {   1.310,  1.697,  2.042,  2.457,  2.750,  3.385  },
/* 31. */   {   1.309,  1.696,  2.040,  2.453,  2.744,  3.375  },
/* 32. */   {   1.309,  1.694,  2.037,  2.449,  2.738,  3.365  },
/* 33. */   {   1.308,  1.692,  2.035,  2.445,  2.733,  3.356  },
/* 34. */   {   1.307,  1.691,  2.032,  2.441,  2.728,  3.348  },
/* 35. */   {   1.306,  1.690,  2.030,  2.438,  2.724,  3.340  },
/* 36. */   {   1.306,  1.688,  2.028,  2.434,  2.719,  3.333  },
/* 37. */   {   1.305,  1.687,  2.026,  2.431,  2.715,  3.326  },
/* 38. */   {   1.304,  1.686,  2.024,  2.429,  2.712,  3.319  },
/* 39. */   {   1.304,  1.685,  2.023,  2.426,  2.708,  3.313  },
/* 40. */   {   1.303,  1.684,  2.021,  2.423,  2.704,  3.307  },
/* 41. */   {   1.303,  1.683,  2.020,  2.421,  2.701,  3.301  },
/* 42. */   {   1.302,  1.682,  2.018,  2.418,  2.698,  3.296  },
/* 43. */   {   1.302,  1.681,  2.017,  2.416,  2.695,  3.291  },
/* 44. */   {   1.301,  1.680,  2.015,  2.414,  2.692,  3.286  },
/* 45. */   {   1.301,  1.679,  2.014,  2.412,  2.690,  3.281  },
/* 46. */   {   1.300,  1.679,  2.013,  2.410,  2.687,  3.277  },
/* 47. */   {   1.300,  1.678,  2.012,  2.408,  2.685,  3.273  },
/* 48. */   {   1.299,  1.677,  2.011,  2.407,  2.682,  3.269  },
/* 49. */   {   1.299,  1.677,  2.010,  2.405,  2.680,  3.265  },
/* 50. */   {   1.299,  1.676,  2.009,  2.403,  2.678,  3.261  },
/* 51. */   {   1.298,  1.675,  2.008,  2.402,  2.676,  3.258  },
/* 52. */   {   1.298,  1.675,  2.007,  2.400,  2.674,  3.255  },
/* 53. */   {   1.298,  1.674,  2.006,  2.399,  2.672,  3.251  },
/* 54. */   {   1.297,  1.674,  2.005,  2.397,  2.670,  3.248  },
/* 55. */   {   1.297,  1.673,  2.004,  2.396,  2.668,  3.245  },
/* 56. */   {   1.297,  1.673,  2.003,  2.395,  2.667,  3.242  },
/* 57. */   {   1.297,  1.672,  2.002,  2.394,  2.665,  3.239  },
/* 58. */   {   1.296,  1.672,  2.002,  2.392,  2.663,  3.237  },
/* 59. */   {   1.296,  1.671,  2.001,  2.391,  2.662,  3.234  },
/* 60. */   {   1.296,  1.671,  2.000,  2.390,  2.660,  3.232  },
/* 61. */   {   1.296,  1.670,  2.000,  2.389,  2.659,  3.229  },
/* 62. */   {   1.295,  1.670,  1.999,  2.388,  2.657,  3.227  },
/* 63. */   {   1.295,  1.669,  1.998,  2.387,  2.656,  3.225  },
/* 64. */   {   1.295,  1.669,  1.998,  2.386,  2.655,  3.223  },
/* 65. */   {   1.295,  1.669,  1.997,  2.385,  2.654,  3.220  },
/* 66. */   {   1.295,  1.668,  1.997,  2.384,  2.652,  3.218  },
/* 67. */   {   1.294,  1.668,  1.996,  2.383,  2.651,  3.216  },
/* 68. */   {   1.294,  1.668,  1.995,  2.382,  2.650,  3.214  },
/* 69. */   {   1.294,  1.667,  1.995,  2.382,  2.649,  3.213  },
/* 70. */   {   1.294,  1.667,  1.994,  2.381,  2.648,  3.211  },
/* 71. */   {   1.294,  1.667,  1.994,  2.380,  2.647,  3.209  },
/* 72. */   {   1.293,  1.666,  1.993,  2.379,  2.646,  3.207  },
/* 73. */   {   1.293,  1.666,  1.993,  2.379,  2.645,  3.206  },
/* 74. */   {   1.293,  1.666,  1.993,  2.378,  2.644,  3.204  },
/* 75. */   {   1.293,  1.665,  1.992,  2.377,  2.643,  3.202  },
/* 76. */   {   1.293,  1.665,  1.992,  2.376,  2.642,  3.201  },
/* 77. */   {   1.293,  1.665,  1.991,  2.376,  2.641,  3.199  },
/* 78. */   {   1.292,  1.665,  1.991,  2.375,  2.640,  3.198  },
/* 79. */   {   1.292,  1.664,  1.990,  2.374,  2.640,  3.197  },
/* 80. */   {   1.292,  1.664,  1.990,  2.374,  2.639,  3.195  },
/* 81. */   {   1.292,  1.664,  1.990,  2.373,  2.638,  3.194  },
/* 82. */   {   1.292,  1.664,  1.989,  2.373,  2.637,  3.193  },
/* 83. */   {   1.292,  1.663,  1.989,  2.372,  2.636,  3.191  },
/* 84. */   {   1.292,  1.663,  1.989,  2.372,  2.636,  3.190  },
/* 85. */   {   1.292,  1.663,  1.988,  2.371,  2.635,  3.189  },
/* 86. */   {   1.291,  1.663,  1.988,  2.370,  2.634,  3.188  },
/* 87. */   {   1.291,  1.663,  1.988,  2.370,  2.634,  3.187  },
/* 88. */   {   1.291,  1.662,  1.987,  2.369,  2.633,  3.185  },
/* 89. */   {   1.291,  1.662,  1.987,  2.369,  2.632,  3.184  },
/* 90. */   {   1.291,  1.662,  1.987,  2.368,  2.632,  3.183  },
/* 91. */   {   1.291,  1.662,  1.986,  2.368,  2.631,  3.182  },
/* 92. */   {   1.291,  1.662,  1.986,  2.368,  2.630,  3.181  },
/* 93. */   {   1.291,  1.661,  1.986,  2.367,  2.630,  3.180  },
/* 94. */   {   1.291,  1.661,  1.986,  2.367,  2.629,  3.179  },
/* 95. */   {   1.291,  1.661,  1.985,  2.366,  2.629,  3.178  },
/* 96. */   {   1.290,  1.661,  1.985,  2.366,  2.628,  3.177  },
/* 97. */   {   1.290,  1.661,  1.985,  2.365,  2.627,  3.176  },
/* 98. */   {   1.290,  1.661,  1.984,  2.365,  2.627,  3.175  },
/* 99. */   {   1.290,  1.660,  1.984,  2.365,  2.626,  3.175  },
/* 100. */  {   1.290,  1.660,  1.984,  2.364,  2.626,  3.174  }
};
#pragma GCC diagnostic pop

YGOR_API int
ygor_t_test(struct ygor_summary* rs,
            struct ygor_summary* ds,
            double interval,
            struct ygor_difference* diff)
{
    int confidx = -1;

    for (size_t i = 0; i < NCONF; ++i)
    {
        if (studentpct[i] * 0.99 < interval &&
            studentpct[i] * 1.01 > interval)
        {
            confidx = i;
            break;
        }
    }

    if (confidx < 0)
    {
        return -1;
    }

    double spool, s, d, e, t;
    uint64_t i;

    i = ds->points + rs->points - 2;

    if (i > NSTUDENT)
    {
        t = student[0][confidx];
    }
    else
    {
        t = student[1][confidx];
    }

    spool = (ds->points - 1) * ds->variance + (rs->points - 1) * rs->variance;
    spool /= ds->points + rs->points - 2;
    spool = sqrt(spool);
    s = spool * sqrt(1.0 / ds->points + 1.0 / rs->points);
    d = ds->mean - rs->mean;
    e = t * s;
    diff->raw = d;
    diff->raw_plus_minus = e;
    diff->percent = d * 100 / (rs->mean);
    diff->percent_plus_minus = e * 100 / rs->mean;
    return fabs(d) > e ? 1 : 0;
}
